from aiosqlite import connect
from aiohttp import ClientSession
from aiogram import Bot, Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.formatting import *
from config import API_TOKEN, BASE_URL, DOMAIN, MERCHANT_ID
from datetime import datetime
import re

router = Router()

class PaymentStates(StatesGroup):
    WAITING_AMOUNT = State()
    WAITING_CHOOSE = State()

def back_kb():
    keyboard = [
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def choose_kb():
    keyboard = [
        [InlineKeyboardButton(text="–ö–∞—Ä—Ç–∞", callback_data='card')],
        [InlineKeyboardButton(text="–°–ë–ü", callback_data='spb')],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.callback_query(F.data == 'create_payment')
async def choose_method(callback_query: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞:", reply_markup=choose_kb())
    await state.set_state(PaymentStates.WAITING_AMOUNT)

@router.message(PaymentStates.WAITING_CHOOSE)
async def how_many(callback_query: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await state.update_data(payment_method=callback_query.data)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞:", reply_markup=back_kb())
    await state.set_state(PaymentStates.WAITING_AMOUNT)

@router.message(PaymentStates.WAITING_AMOUNT)
async def create_payment(message: Message,  state: FSMContext):
    user_data = await state.get_data()
    payment_method = user_data.get('payment_method')
    await state.clear()
    try:
        amount = int(message.text)
        if amount < 1000:
            await message.answer("–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –º–µ–Ω—å—à–µ 1000 RUB!")
            await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", reply_markup=back_kb())
            return   
    except:
        await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", reply_markup=back_kb())
        return
    else:
        msg = await message.reply("‚åõÔ∏è–û–∂–∏–¥–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã...")
        order = await sendpost(amount, message.from_user.id, payment_method)
        await msg.delete()
        for i in order:
            await message.answer(i)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:", reply_markup=choose_kb())
        await state.set_state(PaymentStates.WAITING_CHOOSE)
    
async def check_name(bin):
    async with connect("bins.db") as db:
        cursor = await db.execute(
            "SELECT bank_name FROM bins WHERE bin = ?", 
            (bin,)
        )
        result = await cursor.fetchone()
        return result[0]

async def sendpost(amount, chat_id, payment_method):
    order_id = datetime.now().strftime("%d%m%H%M%S")
    async with ClientSession() as session:
        async with session.post(
            f"{BASE_URL}/create",
            json={
                "merchantId": int(MERCHANT_ID),
                "token": API_TOKEN,
                "orderId": order_id,
                "client": order_id, 
                "clientIp": "80.71.157.117", 
                "callback": f"https://{DOMAIN}/espay/{chat_id}",
                "amount": int(amount),
                "type": payment_method
            }
        ) as response:
            try:
                data = await response.json()
            except:
                data = await response.text()
                return (f"‚ö∞Ô∏è", f"ES-Pay –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç—Ä—É–ø!", f"{data}", "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ –∫–æ–¥–µ—Ä—É!")
            else:
                order_status = data['status']
                print(data, flush=True)
                if order_status == "success":
                    data = data['data']
                    order_id = data['id']
                    requisites = data['requisites']
                    try:
                        card = requisites['card_number']
                        sbp = False
                        card = re.sub(r'\s+', '', card)
                        bank_type = "–∫–∞—Ä—Ç—ã"
                    except:
                        card = requisites['sbp_phone']
                        sbp = True
                        bank_type = "—Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                    bank_name = requisites['bank']
                    owner_name = requisites['name']
                    if not sbp:
                        bin = card[:6]
                        bank_name = await check_name(bin)
                    return (f"üìÑ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞: ‚Ññ<code>{order_id}</code>\n\nüí≥ –ù–æ–º–µ—Ä {bank_type} –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>{card}</code>\nüí∞–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: <code>{amount}</code> —Ä—É–±–ª–µ–π\n\nüïë –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 20 –º–∏–Ω.", F"üè¶–ë–∞–Ω–∫: {bank_name}\nüôç‚Äç‚ôÇÔ∏è–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {owner_name}")
                else:
                    desc = data['message']
                    return ("‚ùì–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", f"{desc}", "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ –∫–æ–¥–µ—Ä—É!")                


