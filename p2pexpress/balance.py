from aiohttp import ClientSession
from aiogram import Bot, Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.formatting import *
from config import API_TOKEN, ADMINS, BASE_URL

router = Router()

class PaymentStates(StatesGroup):
    WAITING_BALANCE = State()
    WAITING_WALLET = State()
    WAITING_NUMBER = State()

def choose_kb():
    keyboard = [
        [InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏", callback_data='cashout')],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def back_kb():
    keyboard = [
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='balance')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def menu_kb():
    keyboard = [
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def last_kb():
    keyboard = [
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='balance')],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.callback_query(F.data == 'balance')
async def balance_menu(callback_query: CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback_query.id)
    if callback_query.from_user.id not in ADMINS:
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É!", reply_markup=menu_kb())
    balance, rate = await check_balance()
    await callback_query.message.answer(text=f"üí∞–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} RUB\nüí±–ö—É—Ä—Å: {rate} RUB –∑–∞ 1 USDT", reply_markup=choose_kb())

@router.callback_query(F.data == 'cashout')
async def how_many(callback_query: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:", reply_markup=back_kb())
    await state.set_state(PaymentStates.WAITING_BALANCE)

@router.message(PaymentStates.WAITING_BALANCE)
async def which_wallet(message: Message, state: FSMContext):
    aval_balance = await check_balance()
    try:
        amount = int(message.text)
        if amount > int(aval_balance[0]):
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –±–æ–ª—å—à–µ, —á–µ–º —É –≤–∞—Å –µ—Å—Ç—å!")
            await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–Ω–æ–≤–∞:", reply_markup=back_kb())
            return
    except Exception as e:
        print(e, flush=True)
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")
        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–Ω–æ–≤–∞:", reply_markup=back_kb())
        return
    await state.update_data(amount=amount)
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=back_kb())
    await state.set_state(PaymentStates.WAITING_WALLET)

@router.message(PaymentStates.WAITING_WALLET)
async def create_order(message: Message, state: FSMContext):
    wallet = message.text
    if len(wallet) < 34:
            await message.answer("–ù–µ–∫–∫–æ—Ä–µ—Ç–Ω—ã–π –∫–æ—à–µ–ª—ë–∫")
            await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–Ω–æ–≤–∞:", reply_markup=back_kb())
            return
    data = await state.get_data()
    amount = data.get("amount") 
    async with ClientSession() as session:
        async with session.post(
            f"{BASE_URL}/v1/payout/payout",
            headers={'authorization': 'Bearer ' + API_TOKEN},
            json={
                "amount": str(amount),
                "wallet": wallet
                  }
        ):
            try:
                await message.answer(f"‚úÖ–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=last_kb())
            except:
                await message.answer(f"{data}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ –∫–æ–¥–µ—Ä—É!")

async def check_balance():
    async with ClientSession() as session:
        async with session.get(
            f"{BASE_URL}/v1/payout/balance",
            headers={'authorization': 'Bearer ' + API_TOKEN}
        ) as response:
            data = await response.json()
            balance = data['balance']
            rate = data['rate']
            return (balance, rate)