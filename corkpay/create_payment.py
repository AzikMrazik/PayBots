import asyncio
from aiohttp import ClientSession
from aiogram import Bot, Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.formatting import *
from config import BASE_URL, MERCHANT_ID, MERCHANT_TOKEN, DOMAIN
from datetime import datetime
from urllib.parse import urljoin

router = Router()

class PaymentStates(StatesGroup):
    WAITING_AMOUNT = State()

def back_kb():
    keyboard = [
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.callback_query(F.data == 'create_payment')
async def how_many(callback_query: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞:", reply_markup=back_kb())
    await state.set_state(PaymentStates.WAITING_AMOUNT)

@router.message(PaymentStates.WAITING_AMOUNT)
async def create_payment(message: Message,  state: FSMContext):
    await state.clear()
    try:
        amount = int(message.text)
        if amount < 1000:
            await message.answer("–î–æ—Å—Ç—É–ø–Ω–∞—è —Å—É–º–º–∞: 1000 - 10.000 RUB!")
            await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", reply_markup=back_kb())
            return   
    except:
        await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", reply_markup=back_kb())
        return
    else:
        msg = await message.reply("‚åõÔ∏è–û–∂–∏–¥–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã...")
        order = await sendpost(amount, message.from_user.id)
        await msg.delete()
        for i in order:
            await message.answer(i)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:", reply_markup=back_kb())
        await state.set_state(PaymentStates.WAITING_AMOUNT)
    

async def sendpost(amount, chat_id):
    order_id = datetime.now().strftime("%d%m%H%M%S")
    async with ClientSession() as session:
        # Normalize BASE_URL and DOMAIN to ensure single scheme
        base = BASE_URL if BASE_URL.startswith(("http://", "https://")) else f"https://{BASE_URL}"
        endpoint = urljoin(base.rstrip("/") + "/", "api/v1/createOrderMerchants")
        domain_base = DOMAIN if DOMAIN.startswith(("http://", "https://")) else f"https://{DOMAIN}"
        callback_url = urljoin(domain_base.rstrip("/") + "/", f"corkpay/{chat_id}")

        async with session.post(
            endpoint,
            json={
                    "ip": order_id,
                    "merchant_id": int(MERCHANT_ID),
                    "external_uui": order_id,
                    "amount": str(amount),
                    "payment_method": "P2P_CARD",
                    "api_key": MERCHANT_TOKEN,
                    "callback_url": callback_url
                }
        ) as response:
            try:
                data = await response.json()
                print(data, flush=True)
            except:
                data = await response.text()
                print(data, flush=True)
                return ("‚ö∞Ô∏èCorkPay –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç—Ä—É–ø!", f"{data}", "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ –∫–æ–¥–µ—Ä—É!")
            else:
                success = data['status']
                if not success:
                    return ("‚ö∞Ô∏èCorkPay –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç—Ä—É–ø!", f"{data}", "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ –∫–æ–¥–µ—Ä—É!")
                order = data['order']
                await sendpost2(order)

async def sendpost2(order, counter = 1):
    async with ClientSession() as session:
        base = BASE_URL if BASE_URL.startswith(("http://", "https://")) else f"https://{BASE_URL}"
        endpoint = urljoin(base.rstrip("/") + "/", "api/v1/get-merchant-order")
        async with session.post(
            endpoint,
            json={
                "order": order,
                "merchant_id": int(MERCHANT_ID),
                "api_key": MERCHANT_TOKEN
            }
        ) as response:
            try:
                data = await response.json()
                print(data, flush=True)
            except:
                data = await response.text()
                print(data, flush=True)
                return ("‚ö∞Ô∏èCorkPay –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç—Ä—É–ø!", f"{data}", "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ –∫–æ–¥–µ—Ä—É!")
            else:
                success = data['status']
                if not success:
                    return ("‚ö∞Ô∏èCorkPay –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç—Ä—É–ø!", f"{data}", "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ –∫–æ–¥–µ—Ä—É!")
                order = data['order']
                status = order['status']
                if status == "CREATE":
                    if counter < 60:
                        counter += 5
                        await asyncio.sleep(counter)
                        return await sendpost2(order, counter)
                    else:
                        return ("‚õî–ù–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤!")
                elif status != "WAIT":
                    return ("‚ö∞Ô∏èCorkPay –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç—Ä—É–ø!", f"{data}", "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ –∫–æ–¥–µ—Ä—É!")
                else:
                    payment = data['payment']
                    details = payment['details']
                    bank = payment['bank']
                    price = data['price']
                    amount = price['buyer_paid']
                    return (f"üìÑ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞: ‚Ññ<code>{order}</code>\n\nüí≥ –ù–æ–º–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>{details}</code>\nüí∞–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: <code>{amount}</code> —Ä—É–±–ª–µ–π\n\nüïë –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 10 –º–∏–Ω.", F"üè¶–ë–∞–Ω–∫: {bank}")
                    




