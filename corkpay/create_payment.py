import asyncio
import re
from aiosqlite import connect
from aiohttp import ClientSession
from aiogram import Bot, Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.formatting import *
from config import API_TOKEN, BASE_URL, MERCHANT_ID, MERCHANT_TOKEN, DOMAIN
from checker import addorder
from datetime import datetime

router = Router()

class PaymentStates(StatesGroup):
    WAITING_AMOUNT = State()

def back_kb():
    keyboard = [
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.callback_query(F.data == 'create_payment')
async def how_many(callback_query: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞:", reply_markup=back_kb())
    await state.set_state(PaymentStates.WAITING_AMOUNT)

@router.message(PaymentStates.WAITING_AMOUNT)
async def create_payment(message: Message,  state: FSMContext):
    await state.clear()
    try:
        amount = int(message.text)
        if amount < 1000 or amount > 10000:
            await message.answer("–î–æ—Å—Ç—É–ø–Ω–∞—è —Å—É–º–º–∞: 1000 - 10.000 RUB!")
            await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", reply_markup=back_kb())
            return   
    except:
        await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", reply_markup=back_kb())
        return
    else:
        msg = await message.reply("‚åõÔ∏è–û–∂–∏–¥–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã...")
        order = await sendpost(amount, message.from_user.id, msg, 1)
        await msg.delete()
        for i in order:
            await message.answer(i)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:", reply_markup=back_kb())
        await state.set_state(PaymentStates.WAITING_AMOUNT)
    
async def check_name(bin):
    async with connect("bins.db") as db:
        cursor = await db.execute(
            "SELECT bank_name FROM bins WHERE bin = ?", 
            (bin,)
        )
        result = await cursor.fetchone()
        return result[0]

async def get_domain():
    async with ClientSession() as session:
        async with session.get(
            f"{BASE_URL}/api/getPayApiDomain/{API_TOKEN}"
        ) as response:
            domain = await response.text()
            return domain

async def sendpost(amount, chat_id, msg, counter):
    domain = await get_domain()
    order_id = datetime.now().strftime("%d%m%H%M%S")
    async with ClientSession() as session:
        async with session.post(
            f"https://{domain}/h2h/p2p",
            json={
                "merchant_id": MERCHANT_ID,
                "merchant_token": MERCHANT_TOKEN,
                "ip": order_id,
                "amount": amount,
                "merchant_order": order_id,
                "callback_url": f"https://{DOMAIN}/corkpay"
            }
        ) as response:
            try:
                data = await response.json()
                print(data, flush=True)
            except:
                data = await response.text()
                return ("‚ö∞Ô∏èCorkPay –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç—Ä—É–ø!", f"{data}", "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ –∫–æ–¥–µ—Ä—É!")
            else:
                order_status = data['status']
                if order_status == "success":
                    card = data['card']
                    card = re.sub(r'\s+', '', card)
                    sign = data['sign']
                    bin = card[:6]
                    if bin[:3] != "220":
                        if counter < 5:
                            counter += 1
                            await msg.edit_text(f"‚åõÔ∏è–û–∂–∏–¥–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã...({counter}/5)")
                            await asyncio.sleep(3)
                            return await sendpost(amount, chat_id, msg, counter)
                        else:
                            return ("‚õî–ù–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤!",)
                    bank_name = await check_name(bin)
                    await addorder(sign, chat_id, amount, order_id)
                    return (f"üìÑ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞: ‚Ññ<code>{order_id}</code>\n\nüí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>{card}</code>\nüí∞–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: <code>{amount}</code> —Ä—É–±–ª–µ–π\n\nüïë –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 20 –º–∏–Ω.", f"üè¶–ë–∞–Ω–∫: {bank_name}")
                else:
                    desc = data['reason']
                    if desc:
                        return ("‚ùì–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", f"{desc}", "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ –∫–æ–¥–µ—Ä—É!")   
                    else:
                        if counter < 5:
                            counter += 1
                            await msg.edit_text(f"‚åõÔ∏è–û–∂–∏–¥–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã...({counter}/5)")
                            await asyncio.sleep(3)
                            return await sendpost(amount, chat_id, msg, counter)
                        else:
                            return ("‚õî–ù–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤!",)                


