from aiogram import Router, F
from aiogram.types import Message
from aiogram.utils.formatting import *
from create_payment import sendpost
from config import ALLOWED_GROUPS
from aiogram.types import BufferedInputFile
from qr_utils import generate_qr

router = Router()

@router.message(F.chat.type.in_({"group", "supergroup"}), F.text.startswith("/qr_"))
@router.message(F.chat.type.in_({"group", "supergroup"}), F.text.startswith("/zds_"))
@router.message(F.chat.type.in_({"group", "supergroup"}), F.text.startswith("/pay_"))
async def cash_command(message: Message):
    if message.chat.id not in ALLOWED_GROUPS:
        await message.answer("–ë–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!")
        return
    try:
        typ = message.text.split("_")[0]
        typ = typ.replace("/", "")
        amount = int(message.text.split("_")[1])
        if amount < 300 and typ != "qr":
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 300 RUB")
            return
        if amount < 2500 and typ == "qr":
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 2500 RUB")
            return
        if typ == "zds":
            await message.answer("–ú–µ—Ç–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω!")
            return
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /pay_1000 /zds_1000 /qr_1000")
        return
    else:
        msg = await message.reply("‚åõÔ∏è–û–∂–∏–¥–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã...")
        order = await sendpost(amount, message.chat.id, msg, 1, typ)
        await msg.delete()
        for i in order:
            if isinstance(i, dict) and 'photo' in i:
                await message.answer_photo(i['photo'], caption=i.get('caption'), parse_mode="HTML")
            else:
                await message.answer(i)
        
@router.message(F.chat.type.in_({"group", "supergroup"}), F.text.startswith("/gen_"))
async def gen_command(message: Message):
    if message.chat.id not in ALLOWED_GROUPS:
        await message.answer("–ë–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!")
        return
    p = message.text.split("_")
    if len(p) < 3:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /gen_—Å—É–º–º–∞_—Å—Å—ã–ª–∫–∞")
        return
    link = p[2]
    amt = p[1]
    photo, caption = await generate_qr(link, amt)
    await message.answer_photo(photo=photo, caption=caption, parse_mode="HTML")
    return


@router.message(F.chat.type.in_({"group", "supergroup"}), F.text.startswith("/temp_"))
async def temp_command(message: Message):
        parts = message.text.split("_")
        if len(parts) < 3:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /temp_—Å—É–º–º–∞_–∫–∞—Ä—Ç–∞")
            return
        
        card = parts[2]
        amount = parts[1]
        template = f"""
üìÑ–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É!

üí≥–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>{card}</code>
üí∞–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: <code>{amount}</code> —Ä—É–±–ª–µ–π

üïë–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 20 –º–∏–Ω.
        """
        try:
            await message.answer(text=template)
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + str(e))
    