import logging
import asyncio
import json
from datetime import datetime
from aiohttp import ClientSession
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.formatting import *
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from config import API_TOKEN

router = Router()

class PaymentStates(StatesGroup):
    WAITING_STARTDATE = State()
    WAITING_ENDDATE = State()

def back_kb():
    keyboard = [
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def choose_kb():
    keyboard = [[InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º", callback_data='empty')],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.callback_query(F.data == 'check')
async def how_many(callback_query: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):", 
        reply_markup=back_kb()
    )
    await state.set_state(PaymentStates.WAITING_STARTDATE)

@router.message(PaymentStates.WAITING_STARTDATE)
async def process_start_date(message: Message, state: FSMContext):
    try:
        date_obj = datetime.strptime(message.text, "%d.%m.%Y")
        await state.update_data(from_ts=int(date_obj.timestamp()))
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º':",
            reply_markup=choose_kb()
        )
        await state.set_state(PaymentStates.WAITING_ENDDATE)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!", reply_markup=back_kb())

@router.callback_query(F.data == 'empty', PaymentStates.WAITING_ENDDATE)
async def process_empty_end_date(callback: CallbackQuery, state: FSMContext):
    await state.update_data(to_ts=None)
    await process_final_request(callback.message, state)

@router.message(PaymentStates.WAITING_ENDDATE)
async def process_end_date(message: Message, state: FSMContext):
    try:
        date_obj = datetime.strptime(message.text, "%d.%m.%Y")
        await state.update_data(to_ts=int(date_obj.timestamp()))
        await process_final_request(message, state)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!", reply_markup=choose_kb())

async def process_final_request(message: Message, state: FSMContext):
    data = await state.get_data()
    filters = {}
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
    if 'from_ts' in data:
        filters['fromTimestampSeconds'] = int(data['from_ts'])
    if 'to_ts' in data and data['to_ts'] is not None:
        filters['toTimestampSeconds'] = int(data['to_ts'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π JSON
    params = {
        'offset': 0,
        'limit': 999,
        'filters': json.dumps(filters, separators=(',', ':'))  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ JSON
    }
    
    print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", params)  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    
    api_url = "https://example.com/merchant/invoices"
    async with ClientSession() as session:
        async with session.get(
            api_url, headers={"Authorization": API_TOKEN}, params=params
        ) as response:
            resp = await response.json()
            successful_orders = [
            entry for entry in resp['data']['entries'] 
            if entry.get('status') == 'succeeded'
        ]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(orders=successful_orders)
        
        # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—ã
        total_rub = sum(float(order['currentAmountCurrency']) for order in successful_orders)
        total_usdt = sum(float(order['currentAmountUsdt']) for order in successful_orders)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–¥–∫–æ–π
        summary = [
            Bold("üìä –°–≤–æ–¥–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥:"),
            f"–í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(successful_orders)}",
            f"–°—É–º–º–∞ –≤ RUB: {total_rub:.2f}",
            f"–°—É–º–º–∞ –≤ USDT: {total_usdt:.2f}",
        ]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="show_all_orders")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await message.answer(**as_section(*summary), reply_markup=keyboard)
        await state.set_state(PaymentStates.SHOW_DETAILS)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã"
@router.callback_query(F.data == "show_all_orders", PaymentStates.SHOW_DETAILS)
async def show_all_orders(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    orders = data.get('orders', [])
    
    for order in orders:
        order_text = as_section(
            Bold("üìù –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:"),
            f"ID: {order['id']}",
            f"–°—É–º–º–∞ –≤ RUB: {order['currentAmountCurrency']}",
            f"–°—É–º–º–∞ –≤ USDT: {order['currentAmountUsdt']}",
            f"–î–∞—Ç–∞: {datetime.fromtimestamp(order['createdTimestampSeconds']).strftime('%d.%m.%Y %H:%M')}",
            "-------------------------"
        )
        await callback.message.answer(**order_text)
    
    await callback.answer()
    await state.clear()